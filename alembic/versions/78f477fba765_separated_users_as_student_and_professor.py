"""Separated users as student and professor

Revision ID: 78f477fba765
Revises: 57e02bcfb667
Create Date: 2024-04-01 18:38:30.460347

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '78f477fba765'
down_revision: Union[str, None] = '57e02bcfb667'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('answers', sa.Column('student_id', sa.String(), nullable=True))
    op.drop_constraint('answers_user_id_fkey', 'answers', type_='foreignkey')
    op.create_foreign_key(None, 'answers', 'students', ['student_id'], ['user_id'])
    op.drop_column('answers', 'user_id')
    op.add_column('attendances', sa.Column('student_id', sa.String(), nullable=True))
    op.drop_constraint('attendances_user_id_fkey', 'attendances', type_='foreignkey')
    op.create_foreign_key(None, 'attendances', 'students', ['student_id'], ['user_id'])
    op.drop_column('attendances', 'user_id')
    op.drop_constraint('classes_instructor_id_fkey', 'classes', type_='foreignkey')
    op.create_foreign_key(None, 'classes', 'professors', ['instructor_id'], ['user_id'])
    op.add_column('enrollments', sa.Column('student_id', sa.String(), nullable=True))
    op.drop_constraint('enrollments_user_id_fkey', 'enrollments', type_='foreignkey')
    op.create_foreign_key(None, 'enrollments', 'students', ['student_id'], ['user_id'])
    op.drop_column('enrollments', 'user_id')
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('student', 'professor', name='user_roles'),
               type_=sa.String(length=50),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'role',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('student', 'professor', name='user_roles'),
               nullable=False)
    op.add_column('enrollments', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'enrollments', type_='foreignkey')
    op.create_foreign_key('enrollments_user_id_fkey', 'enrollments', 'users', ['user_id'], ['user_id'])
    op.drop_column('enrollments', 'student_id')
    op.drop_constraint(None, 'classes', type_='foreignkey')
    op.create_foreign_key('classes_instructor_id_fkey', 'classes', 'users', ['instructor_id'], ['user_id'])
    op.add_column('attendances', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'attendances', type_='foreignkey')
    op.create_foreign_key('attendances_user_id_fkey', 'attendances', 'users', ['user_id'], ['user_id'])
    op.drop_column('attendances', 'student_id')
    op.add_column('answers', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'answers', type_='foreignkey')
    op.create_foreign_key('answers_user_id_fkey', 'answers', 'users', ['user_id'], ['user_id'])
    op.drop_column('answers', 'student_id')
    # ### end Alembic commands ###
